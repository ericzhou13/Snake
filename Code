import pygame
import random
pygame.init() #start the module
win = pygame.display.set_mode((1920,1080))#creates a UI
Run = True
clock = pygame.time.Clock()
coordinates = []
snakecoordinates = []
squares = []
count = 0
score = 0


class Board: #creates the grid for the game
    def __init__(self):
        self.width = 50
        self.height = 50
        self.x = 500
        self.y = 150
    def setBoard(self):
        pygame.draw.rect(win, (255,255,255), (self.x, self.y, 850, 750), 1)
        
        for i in range(0,17): #draws vertical lines
            add = (self.width * i)
            pygame.draw.line(win, (255,255,255), (self.x + add, self.y), (self.x + add, self.y + 750), 1)
  
        for i in range(0,15): #draws horizontal lines
            add = (self.height*i)
            pygame.draw.line(win, (255,255,255), (self.x, self.y + add), (self.x + 850, self.y + add), 1)

    def coordinates(self): #creates and stores all coordinates where the snake can be
        for a in range(0,17):
            xc = (self.width*a)
            for b in range(0,15):
                yc = (self.height*b)
                coordinates.append((xc + self.x, yc + self.y))


    def randomfood(self):#creates a random "food" item on the board at a random coordinate
        itemPlace = random.choice(coordinates)
        global food
        food = pygame.draw.rect(win, (0,255,0), (itemPlace[0],itemPlace[1], 50, 50))



class square:
    def __init__(self, x, y, ID):
        self.ID = ID
        self.x = x
        self.y = y
        self.width = 50
        self.height = 50
        self.vel = 50
        self.Left = False
        self.Right = True
        self.Up = False
        self.Down = False
    def drawsquare(self):
        pygame.draw.rect(win, (255,0,0), (self.x, self.y, self.width, self.height))



def collision(square1):#adds a new square to the snake
    if (square1.x, square1.y) == (itemPlace[0], itemPlace[1]):
        if len(squares) > 1: #determines where the new square should be places based
            if squares[len(squares) - 1].x < squares[len(squares) - 2].x and squares[len(squares) - 1].y == squares[len(squares) - 2].y:
                newsquare = square(squares[len(squares) - 1].x - 50, squares[len(squares) - 1].y, count)
                squares.append(newsquare)
            elif squares[len(squares) - 1].x > squares[len(squares) - 2].x and squares[len(squares) - 1].y == squares[len(squares) - 2].y:
                newsquare = square(squares[len(squares) - 1].x + 50, squares[len(squares) - 1].y, count)
                squares.append(newsquare)
            elif squares[len(squares) - 1].x == squares[len(squares) - 2].x and squares[len(squares) - 1].y > squares[len(squares) - 2].y:
                newsquare = square(squares[len(squares) - 1].x, squares[len(squares) - 1].y + 50, count)
                squares.append(newsquare)
            elif squares[len(squares) - 1].x == squares[len(squares) - 2].x and squares[len(squares) - 1].y < squares[len(squares) - 2].y:
                newsquare = square(squares[len(squares) - 1].x, squares[len(squares) - 1].y - 50, count)
                squares.append(newsquare)
        else:
            newsquare = square(squares[len(squares) - 1].x - 50, squares[len(squares) - 1].y, count)
            squares.append(newsquare)



snakecoordinates = []
def coordinateUpdate(): #updates coordinates for what coordinates the snake takes up
    for i in range(0,len(squares)):
        snakecoordinates.append((squares[i].x, squares[i].y))


def squareUpdate(): #snake movement
    for i in range(0, len(squares) - 1):
        squares[i + 1].x = snakecoordinates[i][0]
        squares[i + 1].y = snakecoordinates[i][1]

def unusedCoordinates(): #coordinates that the snake does not take up
    for snakecoordinate in snakecoordinates:
        for coordinate in coordinates:
            if coordinate == snakecoordinate:
                coordinates.remove(coordinate)




font = pygame.font.SysFont('comicsans', 30, True)
font2 = pygame.font.SysFont('comicsans', 100, True)


Eat = False

square1 = square(600, 300, 0)
squares.append(square1)
SnakeBoard = Board()
SnakeBoard.coordinates()

global itemPlace
itemPlace = random.choice(coordinates)


def redraw(win): #update the window screen
    win.fill((0,0,0))
    text = font.render('Score: ' + str(score), 1, (0, 0, 255))
    text2 = font2.render("Little bitch boy likes kissing little boys", 1, (0, 0, 255))
    if square1.vel == 0:
        win.blit(text2, (300, 500))
    else:
        win.blit(text, (100, 100))
        SnakeBoard.setBoard()
        for square in squares:
            square.drawsquare()
        pygame.draw.rect(win, (0,255,0), (itemPlace[0],itemPlace[1], 50, 50))
    pygame.display.update()

while Run:
    clock.tick(60)
    pygame.time.delay(100)
    #board is at 500, 150
    #board is 850, 750
    for event in pygame.event.get():  # ending the game
        if event.type == pygame.QUIT:
            Run = False
    SnakeBoard.coordinates()
    unusedCoordinates()

    coordinateUpdate()
    squareUpdate()
    keys = pygame.key.get_pressed()

    if keys[pygame.K_LEFT] and square1.x > 550 and not(square1.Right):
        square1.Left = True
        square1.Right = False
        square1.Up = False
        square1.Down = False
    elif keys[pygame.K_RIGHT] and square1.x < 1250 and not(square1.Left):
        square1.Left = False
        square1.Right = True
        square1.Up = False
        square1.Down = False
    elif keys[pygame.K_UP] and square1.y > 200 and not(square1.Down):
        square1.Left = False
        square1.Right = False
        square1.Up = True
        square1.Down = False
    elif keys[pygame.K_DOWN] and square1.y < 800 and not(square1.Up):
        square1.Left = False
        square1.Right = False
        square1.Up = False
        square1.Down = True



    if square1.Left and square1.x >= 550:
        square1.x -= square1.vel
        square1.Right = False
    elif square1.Right and square1.x <= 1250:
        square1.x += square1.vel
        square1.Left = False
    elif square1.Up and square1.y >= 200:
        square1.y -= square1.vel
        square1.Down = False
    elif square1.Down and square1.y <= 800:
        square1.y += square1.vel
        square1.Up = False
    else:
        square1.vel = 0








    if not(Eat):
        pass
    else:
        itemPlace = random.choice(coordinates)
    if (square1.x, square1.y) == (itemPlace[0], itemPlace[1]):
        Eat = True
        count += 1
        score += 1
        #function that creates a new square
    else:
        Eat = False
    collision(square1)


    for coordinate in snakecoordinates:
        x = snakecoordinates.count(coordinate)
        if x > 1:
            square1.vel = 0



    coordinates.clear()
    snakecoordinates.clear()
    redraw(win)

